// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mission06_nathanck.Models;

namespace mission06_nathanck.Migrations
{
    [DbContext(typeof(MovieReviewContext))]
    [Migration("20230221232349_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("mission06_nathanck.Models.ApplicationResponse", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Director")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Edited")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LentTo")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rating")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<short>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId");

                    b.HasIndex("MovieCategoryId");

                    b.ToTable("responses");
                });

            modelBuilder.Entity("mission06_nathanck.Models.MovieCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Action/Adventure"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Family"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Horror/suspense"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Misc"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Drama"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "TV"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "VHS"
                        });
                });

            modelBuilder.Entity("mission06_nathanck.Models.ApplicationResponse", b =>
                {
                    b.HasOne("mission06_nathanck.Models.MovieCategory", "MovieCategory")
                        .WithMany()
                        .HasForeignKey("MovieCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
